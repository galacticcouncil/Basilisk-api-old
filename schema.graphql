# TODO: look into using scalars (type alias)

interface Pool {
    id: ID!
    assetAId: BigInt
    assetBId: BigInt
    assetABalance: BigInt!
    assetBBalance: BigInt!
}

type LBPPool implements Pool @entity {
    "PoolId"
    id: ID!
    assetAId: BigInt!
    assetBId: BigInt!
    assetABalance: BigInt!
    assetBBalance: BigInt!
    saleEndAtRelayChainBlockHeight: Int
    historicalBalances: [HistoricalBalanceLBP!]! @derivedFrom(field: "pool")
}

type XYKPool implements Pool @entity {
    "PoolId"
    id: ID!
    assetAId: BigInt!
    assetBId: BigInt!
    assetABalance: BigInt!
    assetBBalance: BigInt!
    historicalBalances: [HistoricalBalanceXYK!]! @derivedFrom(field: "pool")
}

type BlockHeightPairing @entity {
    "paraChainBlockHash"
    id: ID!
    createdAt: DateTime!
    paraChainBlockHeight: BigInt!
    relayChainBlockHeight: BigInt!
}

# TODO generalize LBPPool reference to Pool; consider using union for XYKPool | LBPPool
type HistoricalBalanceLBP @entity {
    "PoolId-paraChainBlockHeight"
    id: ID!
    assetABalance: BigInt!
    assetBBalance: BigInt!
    createdAt: DateTime!
    pool: LBPPool!
    blockHeight: BlockHeightPairing!
}

type HistoricalBalanceXYK @entity {
    "PoolId-paraChainBlockHeight"
    id: ID!
    assetABalance: BigInt!
    assetBBalance: BigInt!
    createdAt: DateTime!
    pool: XYKPool!
    blockHeight: BlockHeightPairing!
}

type Chronicle @entity {
    id: ID!
    # TODO: use stateSubscription.lastCompletedBlock instead
    lastProcessedBlock: BigInt!
}
